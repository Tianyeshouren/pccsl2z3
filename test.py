# -*- coding: utf-8 -*-
from z3 import *
trace = ""
x = Int('x')
m = Int('m')
b = Int('b')
v = Function("v",BoolSort(),IntSort())
HIC = Function("HIC",IntSort(),IntSort())
TIC = Function("TIC",IntSort(),BoolSort())
SIC = Function("SIC",IntSort(),IntSort())
Tp2 = Function('Tp2',IntSort(),BoolSort())
Tc1 = Function('Tc1',IntSort(),BoolSort())
Sp2 = Function('Sp2',IntSort(),IntSort())
Sc1 = Function('Sc1',IntSort(),IntSort())
Hp2 = Function('Hp2',IntSort(),IntSort())
Hc1 = Function('Hc1',IntSort(),IntSort())
t=Tactic("auflira")
s=t.solver()
s.add(b == 15)
s.add(v(False) == 0)
s.add(v(True) == 1)
s.add(ForAll(x,TIC(x) == True))
s.add(ForAll(x,SIC(x) == x ))
s.add(ForAll(x,HIC(x) == x-1 ))
s.add(Hp2(1) == 0)
s.add(Hp2(2) == Hp2(1) + v(Tp2(1)))
s.add(Hp2(3) == Hp2(2) + v(Tp2(2)))
s.add(Hp2(4) == Hp2(3) + v(Tp2(3)))
s.add(Hp2(5) == Hp2(4) + v(Tp2(4)))
s.add(Hp2(6) == Hp2(5) + v(Tp2(5)))
s.add(Hp2(7) == Hp2(6) + v(Tp2(6)))
s.add(Hp2(8) == Hp2(7) + v(Tp2(7)))
s.add(Hp2(9) == Hp2(8) + v(Tp2(8)))
s.add(Hp2(10) == Hp2(9) + v(Tp2(9)))
s.add(Hp2(11) == Hp2(10) + v(Tp2(10)))
s.add(Hp2(12) == Hp2(11) + v(Tp2(11)))
s.add(Hp2(13) == Hp2(12) + v(Tp2(12)))
s.add(Hp2(14) == Hp2(13) + v(Tp2(13)))
s.add(Hp2(15) == Hp2(14) + v(Tp2(14)))
s.add(Hp2(16) == Hp2(15) + v(Tp2(15)))
s.add(ForAll(x,Implies(And(x>=1,x<=b),Implies(Tp2(x),Sp2(Hp2(x)+1) == x))))
s.add(ForAll(x,Implies(x>Hp2(b+1),Sp2(x) == b+2)))
s.add(Hc1(1) == 0)
s.add(Hc1(2) == Hc1(1) + v(Tc1(1)))
s.add(Hc1(3) == Hc1(2) + v(Tc1(2)))
s.add(Hc1(4) == Hc1(3) + v(Tc1(3)))
s.add(Hc1(5) == Hc1(4) + v(Tc1(4)))
s.add(Hc1(6) == Hc1(5) + v(Tc1(5)))
s.add(Hc1(7) == Hc1(6) + v(Tc1(6)))
s.add(Hc1(8) == Hc1(7) + v(Tc1(7)))
s.add(Hc1(9) == Hc1(8) + v(Tc1(8)))
s.add(Hc1(10) == Hc1(9) + v(Tc1(9)))
s.add(Hc1(11) == Hc1(10) + v(Tc1(10)))
s.add(Hc1(12) == Hc1(11) + v(Tc1(11)))
s.add(Hc1(13) == Hc1(12) + v(Tc1(12)))
s.add(Hc1(14) == Hc1(13) + v(Tc1(13)))
s.add(Hc1(15) == Hc1(14) + v(Tc1(14)))
s.add(Hc1(16) == Hc1(15) + v(Tc1(15)))
s.add(ForAll(x,Implies(And(x>=1,x<=b),Implies(Tc1(x),Sc1(Hc1(x)+1) == x))))
s.add(ForAll(x,Implies(x>Hc1(b+1),Sc1(x) == b+2)))
s.add(ForAll([x],Implies(And(x>=1,x<=b+1),Hc1(x) >= HIC(x))))
s.add(ForAll([x],Implies(And(x>=1,x<=b),Implies( And((HIC(x)+3) % 4  == 0,TIC(x)),Tp2(x) )  )))
s.add(ForAll([x],Implies(And(x>=1,x<=b),Implies( Not(And((HIC(x)+3) % 4  == 0,TIC(x))),Not(Tp2(x) ))  )))
s.add(ForAll([x],Implies(And(x >= 1, x<=b),(Or(Tp2(x) , Tc1(x) )))))
print(s.check())
if (str(s.check())=='unsat'):
	with open(r'traces.txt', 'w', encoding='utf-8') as f:
		f.write("unsat")
	quit()
m = s.model()
print("p2: ")
trace += "p2: "
for i in range(1,16):
	temp=str(m.eval(v(Tp2(i))))
	print(temp,end=' '),
	trace += temp
print("\n")
trace += "\n"
print("c1: ")
trace += "c1: "
for i in range(1,16):
	temp=str(m.eval(v(Tc1(i))))
	print(temp,end=' '),
	trace += temp
print("\n")
trace += "\n"
print(trace)
with open(r'traces.txt', 'w', encoding='utf-8') as f:
	f.write(trace[:-1])